//조이스틱센서쉴드 코드		// https://gist.github.com/rlogiacco/b50b2a4398029bd4eb3c 참고

#include <SPI.h>		// 이 라이브러리는 마스터 장치로 아두인와 SPI장치와 통신 할 수 있게함.


#include "RF24.h"
#include "nRF24L01.h"		// 2.4GHz 무선통신, 라디오스케치(?)	// nRF24L01모듈을 이용하기위한 라이브러리,												// nRF24L01은 SPI통신을 사용하며 양방향 통신을 지원합니다.
									// http://kocoafab.cc/tutorial/view/578 참고

#define CE_PIN 3		// CE : Chip Enable
#define CSN_PIN 2

unsigned int joystick[3]={0,};

//데이터 통신 할 타겟 선언
const uint64_t pipe = 0xE8E8F0F0E1LL;	// 파이프통신사용, 채널 주소가 아니라 송신기의 주소이다.
					// uint64_t는 unsigned long long 


//입출력핀 선언
unsigned char inputPin[5] = {A2, A3, A4, A5, 8};	// 핀을 올바른 위치에 꼽아야함.


RF24 radio(CE_PIN, CSN_PIN);	// Set up nRF24L01 radio on SPI bus plus pins 3 & 2





void setup(void)
{
  Serial.begin(9600);   //통신속도
  radio.begin();        //통신시작

// Set the PA Level low to prevent power supply related issues since this is a
// getting_started sketch, and the likelihood of close proximity of the devices. RF24_PA_MAX is default.
  radio.setPALevel(RF24_PA_MIN); // LOW, MAX	//뭔지모르겠음
  


  radio.openWritingPipe(pipe);	//Writing하기위한 파이프를 열음, stopListening()이 나올때까지 계속


   //핀모드 입출력 설정
  for(char i = 0; i < 5; i++){
   pinMode(inputPin[i], INPUT); 
  }
  
 // for(int i = 0; i < 1; i++){
 //   pinMode(outputPin[i], OUTPUT); 
 // }  
} 






void loop(void)
{
  // radio.stopListening();		//데이터를 전송하기위해서는 데이터 수신을 중지해야하기때문에 사용
  // 데이터저장

  
  //빨간색 버튼
  if(digitalRead(8) == LOW)		//8번핀의 전압을 읽어드려 LOW(0V) 이면
    joystick[2] = 0;
  else
    joystick[2] = 1;
    
  //x축 데이터 저장
  joystick[0] = analogRead(A0);		//A0의 전압의 값을 읽어서 0번째에 저장

  //y축 데이터 저장
  joystick[1] = analogRead(A1);		//A1의 전압의 값을 읽어서 1번째에 저장

  
  //시작 주소와 데이터 사이즈 전달
  for(int i= 0; i<3;i++){
    Serial.print("data");
    Serial.print(i);
    Serial.print(" : ");
    Serial.println(joystick[i]);
  }
  Serial.println("Send");  
  joystick[3]++;
  radio.write( joystick, sizeof(joystick) );

 // Serial.println("complete");
 //delay(1000);
}

